#!/bin/sh

load_vars()
{
	MDB_CONFIG=$1;
	MDB_CMD=$2;
	MDB_DB=$3;
	MDB_FILE=$4;
	ERR='\033[0;31m';
 	WAR='\033[0;33m';
 	NC='\033[0m';


	if [ "$MDB_HOME" == "" ]; then
		MDB_HOME=/etc/mdb;
	fi

}

check_inputs()
{
	FILE_CONFIG="$MDB_HOME/configs/${MDB_CONFIG}.container.conf";
	if [ ! -f "$FILE_CONFIG" ]; then
		echo "Configuration not found for: $MDB_CONFIG";
		echo "Values avaliable:";
		echo "	postgres";
		echo "	mysql";
		echo "";
		echo "The instruction expected is: mdb <configuration>"
		echo "";
		exit 1;
	fi

	if [ "$MDB_CMD" != "start" ] && [ "$MDB_CMD" != "stop" ] && [ "$MDB_CMD" != "drop" ] && [ "$MDB_CMD" != "create" ] && [ "$MDB_CMD" != "restore" ] ; then
		echo "Option '$MDB_CMD' not avaliable";
		echo "Values avaliable:";
		echo "	start                      - Start SGBD server if not runnig.";
		echo "	stop                       - Stop SGBD server if running";
		echo "	create <database>          - Create new database in SGBD.";
		echo "	drop <database>            - Drop database at SGBD if it exists.";
		echo "	restore <database> <file>  - Restore file at that database.";
		echo "";
		echo "The instruction expected is: mdb $MDB_CONFIG <option>"
		echo "";
		exit 1;
	fi	
	
	if [ "$MDB_CMD" == "drop" ] || [ "$MDB_CMD" == "create" ] || [ "$MDB_CMD" == "restore" ] && [ "$MDB_DB" == "" ]  ; then
		echo "No database information"
		echo "The instruction expected is: mdb $MDB_CONFIG $MDB_CMD <database>"
		echo "";
		exit 1;
	fi

	if [ "$MDB_CMD" == "restore" ] && [ "$MDB_FILE" == "" ]  ; then
		echo "No file information"
		echo "The instruction expected is: mdb $MDB_CONFIG $MDB_CMD $MDB_DB <file>"
		echo "";
		exit 1;
	fi

	if [ "$MDB_CMD" == "restore" ] && [ ! -f "$MDB_FILE" ]  ; then
		echo "File not found: $MDB_FILE"
		echo "";
		exit 1;
	fi


}

load_config()
{
	echo "Loading configurations..."
	while read i ; do
		while IFS='=' read -ra j; do
			case ${j[0]} in
				sgbd) 
					MDB_SGBD=${j[1]};
					break;;
				version) 
					MDB_VERSION=${j[1]};
					break;;
				container_name) 
					MDB_NAME=${j[1]};
					break;;
				password) 
					MDB_PASS=${j[1]};
					break;;
				port) 
					MDB_PORT=${j[1]};
					break;;
			esac
		done <<< "$i"
	done < $1
	
	if [ "$MDB_SGBD" == "" ] || [ "$MDB_VERSION" == "" ] || [ "$MDB_NAME" == "" ] || [ "$MDB_PASS" == "" ] || [ "$MDB_PORT" == "" ]; then
		echo "Configurations invalid. Required field is empty."
		exit 1
	fi
}

execute_command(){
	case $1 in
		start)
			MDB_VOLUME_DATA="$MDB_HOME/volumes/$MDB_CONFIG";
			sh $MDB_HOME/bin/start_sgbd $MDB_SGBD $MDB_VOLUME_DATA $MDB_VERSION $MDB_NAME $MDB_PASS $MDB_PORT
			break;;
		stop)
			sh $MDB_HOME/bin/stop_sgbd $MDB_NAME
			break;;
		create)
			sh $MDB_HOME/bin/create_database $MDB_NAME $MDB_PASS $MDB_DB
			break;;
		drop)
			sh $MDB_HOME/bin/drop_database $MDB_NAME $MDB_PASS $MDB_DB
			break;;
		restore)
			sh $MDB_HOME/bin/restore_database $MDB_NAME $MDB_PASS $MDB_DB $MDB_FILE
			break;;
	esac
}

main()
{
	load_vars $@
	check_inputs
	load_config $FILE_CONFIG	
	execute_command $MDB_CMD
}

main $@

